function [Points, Springs] = geodesic_grid(filename, num_iterations)
%% generates a geodesic grid with weights based on filename
% num_iterations: number of points is 10*4^num_iterations
% filename: the name of the file that contains the weights data
% Points: an nx3 array where each row is a point, [phi, lambda, m]
% Springs: an mx4 array where each row is a spring, [i, j, k, l0]

PHI = (1+sqrt(5))/2;

PtsOld = [...
     0,  PHI,  1;...
     0, -PHI,  1;...
     0,  PHI, -1;...
     0, -PHI, -1;...
     1,  0,  PHI;...
    -1,  0,  PHI;...
     1,  0, -PHI;...
    -1,  0, -PHI;...
     PHI,  1,  0;...
    -PHI,  1,  0;...
     PHI, -1,  0;...
    -PHI, -1,  0] / norm([1, PHI]);

TriOld = [
    1, 9, 3;...
    1, 3, 10;...
    1, 10, 6;...
    1, 6, 5;...
    1, 5, 9;...
    2, 4, 11;...
    2, 11, 5;...
    2, 5, 6;...
    2, 6, 12;...
    2, 12, 4;...
    3, 9, 7;...
    3, 7, 8;...
    3, 8, 10;...
    4, 12, 8;...
    4, 8, 7;...
    4, 7, 11;...
    5, 11, 9;...
    6, 10, 12;...
    7, 9, 11;...
    8, 12, 10
    ];

for i = 1:num_iterations
    
    % add the midpoint of each line to the grid
    [numPoints, ~] = size(PtsOld);
    [numFaces, ~] = size(TriOld);
    idx = numPoints+1;
    
    PtsNew = [PtsOld; zeros(numFaces*3, 3)];
    for i = 1:numFaces
        Face = TriOld(i,:);
        for j = 1:3
            Pa = PtsOld(Face(j,i), Face(j,(i+1)%));
            PtsOld(idx,:) = 
        end
    end
    
    % draw new triangles with the new vertices
    
    
end

figure;
hold on;
sz = size(TriOld);
for i = 1:sz(1)
    plot3(...
        [PtsOld(TriOld(i,1),1);PtsOld(TriOld(i,2),1);PtsOld(TriOld(i,3),1);PtsOld(TriOld(i,1),1)],...
        [PtsOld(TriOld(i,1),2);PtsOld(TriOld(i,2),2);PtsOld(TriOld(i,3),2);PtsOld(TriOld(i,1),2)],...
        [PtsOld(TriOld(i,1),3);PtsOld(TriOld(i,2),3);PtsOld(TriOld(i,3),3);PtsOld(TriOld(i,1),3)],'--');
end
axis equal;

end